\contentsline {chapter}{List of Figures}{viii}
\contentsline {chapter}{List of Tables}{xi}
\contentsline {chapter}{\numberline {1}Introduction}{1}
\contentsline {subsection}{\numberline {1.0.1}Prolog}{2}
\contentsline {subsection}{\numberline {1.0.2}Parallelism}{3}
\contentsline {subsection}{\numberline {1.0.3}Functions}{4}
\contentsline {section}{\numberline {1.1}The Delphi Machine: Background}{7}
\contentsline {subsection}{\numberline {1.1.1}The Delphi principle}{7}
\contentsline {subsection}{\numberline {1.1.2}Path processors}{9}
\contentsline {subsection}{\numberline {1.1.3}Delphi strategies}{11}
\contentsline {section}{\numberline {1.2}The Delphi Machine and \textit {cut}}{13}
\contentsline {section}{\numberline {1.3}The Delphi Machine and functions}{15}
\contentsline {section}{\numberline {1.4}Research Motivation}{16}
\contentsline {section}{\numberline {1.5}Research Goals}{17}
\contentsline {section}{\numberline {1.6}Contributions}{17}
\contentsline {chapter}{\numberline {2}Background}{19}
\contentsline {section}{\numberline {2.1}Parallelism in Prolog}{19}
\contentsline {subsection}{\numberline {2.1.1}OR-parallelism}{21}
\contentsline {subsubsection}{\numberline {2.1.1.1}Muse}{23}
\contentsline {subsubsection}{\numberline {2.1.1.2}Aurora}{23}
\contentsline {subsubsection}{\numberline {2.1.1.3}Kabu-Wake}{24}
\contentsline {subsubsection}{\numberline {2.1.1.4}OPERA}{24}
\contentsline {subsubsection}{\numberline {2.1.1.5}ANL-WAM}{26}
\contentsline {subsubsection}{\numberline {2.1.1.6}Boplog}{26}
\contentsline {subsection}{\numberline {2.1.2}AND-parallelism}{27}
\contentsline {subsubsection}{\numberline {2.1.2.1}Parlog}{27}
\contentsline {subsubsection}{\numberline {2.1.2.2}Concurrent Prolog}{29}
\contentsline {subsubsection}{\numberline {2.1.2.3}Delta Prolog}{29}
\contentsline {subsubsection}{\numberline {2.1.2.4}EPILOG}{30}
\contentsline {subsection}{\numberline {2.1.3}Other forms of parallelism in Prolog}{30}
\contentsline {section}{\numberline {2.2}Functional Logic}{31}
\contentsline {subsection}{\numberline {2.2.1}Functions as deterministic Prolog procedures}{32}
\contentsline {subsection}{\numberline {2.2.2}Term evaluation}{33}
\contentsline {subsection}{\numberline {2.2.3}Mode and determinism declarations for relations}{34}
\contentsline {subsection}{\numberline {2.2.4}Predicates as set-valued functions}{36}
\contentsline {subsection}{\numberline {2.2.5}Predicates as Boolean functions}{37}
\contentsline {subsection}{\numberline {2.2.6}Resolution extended to equational systems}{40}
\contentsline {subsection}{\numberline {2.2.7}Extended Prolog \textit {call} semantics}{42}
\contentsline {subsubsection}{\numberline {2.2.7.1}\texttt {call/N}}{43}
\contentsline {subsubsection}{\numberline {2.2.7.2}\texttt {apply/3}}{43}
\contentsline {section}{\numberline {2.3}The Delphi Machine: previous work}{44}
\contentsline {subsection}{\numberline {2.3.1}The Delphi principle}{44}
\contentsline {subsection}{\numberline {2.3.2}Architecture}{46}
\contentsline {subsection}{\numberline {2.3.3}Oracles}{48}
\contentsline {subsection}{\numberline {2.3.4}Delphi scheduling strategies}{49}
\contentsline {subsubsection}{\numberline {2.3.4.1}Non-backtracking partitioning strategies}{49}
\contentsline {subsubsection}{\numberline {2.3.4.2}Backtracking partitioning strategies}{51}
\contentsline {section}{\numberline {2.4}Summary}{58}
\contentsline {chapter}{\numberline {3}Prolog with Breadth-First Partitioning}{59}
\contentsline {section}{\numberline {3.1}Introduction}{59}
\contentsline {section}{\numberline {3.2}Benchmarks used}{60}
\contentsline {subsection}{\numberline {3.2.1}8-queens}{60}
\contentsline {subsection}{\numberline {3.2.2}10-queens}{61}
\contentsline {subsection}{\numberline {3.2.3}Pentominoes}{61}
\contentsline {subsection}{\numberline {3.2.4}Other benchmarks in DelphiKS}{62}
\contentsline {section}{\numberline {3.3}Implementation differences}{62}
\contentsline {subsection}{\numberline {3.3.1}DelphiKS}{62}
\contentsline {subsection}{\numberline {3.3.2}Prototype PrologPF with Prolog oracles}{63}
\contentsline {subsection}{\numberline {3.3.3}PrologPF with C oracles}{64}
\contentsline {subsection}{\numberline {3.3.4}BFP and oracle allocation algorithm}{68}
\contentsline {section}{\numberline {3.4}Single CPU performance}{69}
\contentsline {subsection}{\numberline {3.4.1}Single CPU comparison: DelphiKS, PrologPF, sequential Prolog}{69}
\contentsline {section}{\numberline {3.5}Parallel execution performance}{71}
\contentsline {subsection}{\numberline {3.5.1}8-queens}{71}
\contentsline {subsection}{\numberline {3.5.2}10-queens}{73}
\contentsline {subsection}{\numberline {3.5.3}Pentominoes}{74}
\contentsline {subsection}{\numberline {3.5.4}Summary}{76}
\contentsline {section}{\numberline {3.6}Issues}{77}
\contentsline {subsection}{\numberline {3.6.1}Oracle discovery and allocation}{79}
\contentsline {subsubsection}{\numberline {3.6.1.1}All-solutions versus first-solution parallel runtimes}{83}
\contentsline {subsection}{\numberline {3.6.2}Work function estimation}{84}
\contentsline {subsection}{\numberline {3.6.3}Partitioning depth}{86}
\contentsline {subsection}{\numberline {3.6.4}Fixed versus demand-based oracle allocation}{87}
\contentsline {subsection}{\numberline {3.6.5}Work splitting}{92}
\contentsline {section}{\numberline {3.7}Breadth-first partitioning versus stream-AND parallelism}{96}
\contentsline {section}{\numberline {3.8}Conclusions}{98}
\contentsline {section}{\numberline {3.9}Summary}{99}
\contentsline {chapter}{\numberline {4}Cuts versus the Delphi Principle}{103}
\contentsline {section}{\numberline {4.1}Cut in standard Prolog programs}{103}
\contentsline {section}{\numberline {4.2}Experimental Analysis}{106}
\contentsline {section}{\numberline {4.3}Strategies for dealing with \textit {cut}}{107}
\contentsline {section}{\numberline {4.4}Cuts in PrologPF}{109}
\contentsline {section}{\numberline {4.5}Conclusions}{113}
\contentsline {section}{\numberline {4.6}Summary}{114}
\contentsline {chapter}{\numberline {5}Higher-Order Functions in PrologPF}{116}
\contentsline {section}{\numberline {5.1}Introduction}{116}
\contentsline {subsection}{\numberline {5.1.1}Implementation goals}{117}
\contentsline {section}{\numberline {5.2}Function definition: the \texttt {fun} relation}{117}
\contentsline {subsection}{\numberline {5.2.1}A PrologPF example}{117}
\contentsline {subsection}{\numberline {5.2.2}The PrologPF approach}{118}
\contentsline {subsection}{\numberline {5.2.3}Alternative approaches}{120}
\contentsline {subsubsection}{\numberline {5.2.3.1}Deterministic relations in Prolog}{120}
\contentsline {subsubsection}{\numberline {5.2.3.2}Mercury}{120}
\contentsline {subsubsection}{\numberline {5.2.3.3}Curry}{122}
\contentsline {subsubsection}{\numberline {5.2.3.4}External procedures}{122}
\contentsline {subsubsection}{\numberline {5.2.3.5}Logic programming with equality}{123}
\contentsline {section}{\numberline {5.3}Function application: the \texttt {@} operator}{123}
\contentsline {subsection}{\numberline {5.3.1}Extending Prolog for explicit function application}{123}
\contentsline {subsection}{\numberline {5.3.2}Function application: syntactic sugaring}{125}
\contentsline {section}{\numberline {5.4}Higher-order functions and currying}{125}
\contentsline {subsection}{\numberline {5.4.1}Lambda-expressions}{126}
\contentsline {subsection}{\numberline {5.4.2}Currying}{126}
\contentsline {section}{\numberline {5.5}Special treatment of \texttt {if-then-else}}{127}
\contentsline {subsection}{\numberline {5.5.1}Syntax}{128}
\contentsline {subsection}{\numberline {5.5.2}Evaluation}{129}
\contentsline {subsubsection}{\numberline {5.5.2.1}Defined evaluation ordering with \texttt {if}}{129}
\contentsline {subsubsection}{\numberline {5.5.2.2}\texttt {if} condition as relational goal}{130}
\contentsline {subsection}{\numberline {5.5.3}Value declarations}{131}
\contentsline {subsection}{\numberline {5.5.4}Alternate function definitions $\equiv $ \texttt {if}}{133}
\contentsline {subsection}{\numberline {5.5.5}Summary of PrologPF \texttt {if} semantics}{134}
\contentsline {section}{\numberline {5.6}Boolean functions as relations}{135}
\contentsline {section}{\numberline {5.7}Failure of functions}{136}
\contentsline {subsection}{\numberline {5.7.1}Functional failure $\Rightarrow $ Relation failure}{136}
\contentsline {subsection}{\numberline {5.7.2}Function \texttt {fail} as an exception}{137}
\contentsline {subsubsection}{\numberline {5.7.2.1}A proposal for more general exception support in PrologPF}{138}
\contentsline {section}{\numberline {5.8}Unit}{140}
\contentsline {section}{\numberline {5.9}The interaction of functions and relations}{141}
\contentsline {section}{\numberline {5.10}Some PrologPF examples}{142}
\contentsline {subsection}{\numberline {5.10.1}Undergraduate Prolog exercise attempt}{142}
\contentsline {subsection}{\numberline {5.10.2}Lazy lists}{143}
\contentsline {section}{\numberline {5.11}Comparison of PrologPF with \texttt {call/N, apply/3}}{144}
\contentsline {section}{\numberline {5.12}Conclusions}{150}
\contentsline {section}{\numberline {5.13}Summary}{151}
\contentsline {chapter}{\numberline {6}Case Studies}{152}
\contentsline {section}{\numberline {6.1}Exercise 4 - Routes}{153}
\contentsline {subsection}{\numberline {6.1.1}Problem Description}{153}
\contentsline {subsection}{\numberline {6.1.2}Startpoints and Endpoints}{153}
\contentsline {subsection}{\numberline {6.1.3}Allpairs and append}{154}
\contentsline {subsection}{\numberline {6.1.4}Addnew}{156}
\contentsline {subsection}{\numberline {6.1.5}Routes}{156}
\contentsline {section}{\numberline {6.2}Exercise 6 - Primes}{157}
\contentsline {subsection}{\numberline {6.2.1}Infinite lists}{157}
\contentsline {subsection}{\numberline {6.2.2}Head, tail and nth}{157}
\contentsline {subsection}{\numberline {6.2.3}Filters}{158}
\contentsline {subsection}{\numberline {6.2.4}Primes}{159}
\contentsline {section}{\numberline {6.3}Prolog Technology Theorem Prover}{159}
\contentsline {subsection}{\numberline {6.3.1}Chang and Lee example 2}{160}
\contentsline {subsection}{\numberline {6.3.2}Overbeek example 4}{161}
\contentsline {section}{\numberline {6.4}Conclusions}{164}
\contentsline {section}{\numberline {6.5}Summary}{165}
\contentsline {chapter}{\numberline {7}Kappa}{167}
\contentsline {section}{\numberline {7.1}Background}{167}
\contentsline {section}{\numberline {7.2}Breadth-first partitioning without oracles}{168}
\contentsline {section}{\numberline {7.3}The gate proposition \texttt {k\_{}gate}}{170}
\contentsline {section}{\numberline {7.4}\texttt {kappa}}{172}
\contentsline {section}{\numberline {7.5}Kappa at every subgoal versus selective use}{172}
\contentsline {section}{\numberline {7.6}Efficiency considerations}{175}
\contentsline {subsection}{\numberline {7.6.1}Sequential computation when $\unhbox \voidb@x \hbox {depth}<L$}{175}
\contentsline {subsection}{\numberline {7.6.2}Optimal selection of depth limit $L$}{176}
\contentsline {subsection}{\numberline {7.6.3}Oracle data structures imply limit on $L$}{177}
\contentsline {subsection}{\numberline {7.6.4}Total \texttt {kappa} port count versus PrologPF open oracle count}{179}
\contentsline {subsection}{\numberline {7.6.5}Work reassignment on path processor failure}{179}
\contentsline {subsection}{\numberline {7.6.6}Solutions found within the depth limit}{180}
\contentsline {section}{\numberline {7.7}Repeated partitioning}{181}
\contentsline {section}{\numberline {7.8}Conclusions}{182}
\contentsline {section}{\numberline {7.9}Summary}{183}
\contentsline {chapter}{\numberline {8}SOK: Splitting with Oracles and Kappa}{185}
\contentsline {section}{\numberline {8.1}Background}{185}
\contentsline {subsection}{\numberline {8.1.1}Oracles}{185}
\contentsline {subsection}{\numberline {8.1.2}Kappa}{187}
\contentsline {section}{\numberline {8.2}Work splitting}{187}
\contentsline {subsection}{\numberline {8.2.1}At the busy path processor}{188}
\contentsline {subsection}{\numberline {8.2.2}At the idle path processors}{190}
\contentsline {section}{\numberline {8.3}Scheduling}{191}
\contentsline {section}{\numberline {8.4}Results}{192}
\contentsline {subsection}{\numberline {8.4.1}Fixed depth increment}{194}
\contentsline {subsection}{\numberline {8.4.2}Doubling depth increment}{195}
\contentsline {section}{\numberline {8.5}Conclusions}{197}
\contentsline {section}{\numberline {8.6}Summary}{199}
\contentsline {chapter}{\numberline {9}Conclusions}{201}
\contentsline {section}{\numberline {9.1}Future work}{204}
\contentsline {chapter}{\numberline {A}System description}{205}
\contentsline {section}{\numberline {A.1}System overview}{205}
\contentsline {section}{\numberline {A.2}The Prolog compiler: \texttt {wamcc}}{206}
\contentsline {section}{\numberline {A.3}The PrologPF Compiler: \texttt {prologpf}}{207}
\contentsline {section}{\numberline {A.4}The Network System: \texttt {skynet}, \texttt {skyhub} and \texttt {ppc}}{208}
\contentsline {chapter}{\numberline {B}Benchmarks}{212}
\contentsline {section}{\numberline {B.1}Queens}{212}
\contentsline {section}{\numberline {B.2}Pentominoes}{214}
\contentsline {section}{\numberline {B.3}Prolog Technology Theorem Prover}{219}
\contentsline {subsection}{\numberline {B.3.1}Chang and Lee Example 2}{219}
\contentsline {subsection}{\numberline {B.3.2}Overbeek Example 4}{220}
\contentsline {chapter}{\numberline {C}Source code for \texttt {kappa}}{221}
