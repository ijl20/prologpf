/****************************************************************************
Prolog to Wam Compiler                     INRIA Rocquencourt - ChLoE Project
Version 0.02                                               Daniel Diaz - 1994

file : k_utils.usr
****************************************************************************/

#define MAXORC  10000               /* maximum length of oracle            */

static int defer = 0;               /* flag to defer interrupt handling    */

static int skip = 0;                /* flag to skip prev port on interrupt */

static int port_orc = 0;            /* flag to truncate oracle to PORT on  */
                                    /* interrupt                           */

static int orc[MAXORC];             /* array to hold orc as it is built    */

static int b_depth;                 /* current BUILD or-depth              */

static int orc_l0;                  /* depth limit L0                      */
static int orc_l;                   /* depth limit L                       */
static int orc_g;                   /* group count G                       */
static int orc_n;                   /* unique processor number N           */
static int orc_s;                   /* count of ports S                    */
static int orc_length = 0;          /* length of oracle to follow          */

#define o_kbuild1                                                         \
    { int index;                                                          \
      ++b_depth;                                                          \
      Deref(A(0),word,tag,adr)                                            \
      index = UnTag_INT(word);                                            \
      if (b_depth <= orc_l0) { if (index != orc[b_depth]) fail;}          \
      else { if (b_depth <= orc_length)                                   \
               { if (index < orc[b_depth]) fail;                          \
                 if (index > orc[b_depth]) orc_length = 0;                \
               }                                                          \
             orc[b_depth] = index;                                        \
             if (b_depth == orc_l)                                        \
               { if (skip) { skip = 0; fail; }                            \
                 orc_s++;                                                 \
                 if (orc_s % orc_g != orc_n) fail;                        \
                 if (defer) { defer = 0; send_oracle(); fail; }           \
               }                                                          \
           }                                                              \
    }

#define o_kbuild2                                                       \
    {                                                                   \
      b_depth--;                                                        \
      fail;                                                             \
    }

#define o_kset_l0                                                       \
    {                                                                   \
      Deref(A(0),word,tag,adr)                                          \
      orc_l0 = UnTag_INT(word);                                         \
    }

#define o_kread_l0                                                      \
    {                                                                   \
      get_integer(orc_l0,0)                                             \
    }

#define o_kset_l                                                        \
    {                                                                   \
      Deref(A(0),word,tag,adr)                                          \
      orc_l = UnTag_INT(word);                                          \
    }

#define o_kread_l                                                       \
    {                                                                   \
      get_integer(orc_l,0)                                              \
    }

#define o_kset_g                                                        \
    {                                                                   \
      Deref(A(0),word,tag,adr)                                          \
      orc_g = UnTag_INT(word);                                          \
    }

#define o_kread_g                                                       \
    {                                                                   \
      get_integer(orc_g,0)                                              \
    }

#define o_kset_n                                                        \
    {                                                                   \
      Deref(A(0),word,tag,adr)                                          \
      orc_n = UnTag_INT(word);                                          \
    }

#define o_kread_n                                                       \
    {                                                                   \
      get_integer(orc_n,0)                                              \
    }

#define o_kset_s                                                        \
    {                                                                   \
      Deref(A(0),word,tag,adr)                                          \
      orc_s = UnTag_INT(word);                                          \
    }

#define o_kread_s                                                       \
    {                                                                   \
      get_integer(orc_s,0)                                              \
    }

#define o_kdefer                                                        \
    {                                                                   \
      defer = 1;                                                        \
    }

#define o_kskip                                                         \
    {                                                                   \
      skip = 1;                                                         \
    }

#define o_kport_orc                                                     \
    {                                                                   \
      port_orc = 1;                                                     \
    }

#define o_kread_b_depth                                                 \
    {                                                                   \
      get_integer(b_depth,0)                                            \
    }

#define o_kset_orc_length                                               \
    {                                                                   \
      Deref(A(0),word,tag,adr)                                          \
      orc_length = UnTag_INT(word);                                     \
    }

#define o_kread_orc_length                                              \
    {                                                                   \
      get_integer(orc_length,0)                                         \
    }

#define o_kset_orc_index                                                \
    {                                                                   \
      int i;                                                            \
      Deref(A(0),word,tag,adr)                                          \
      i = UnTag_INT(word);                                              \
      Deref(A(1),word,tag,adr)                                          \
      orc[i] = UnTag_INT(word);                                         \
    }


#define o_kread_orc_index                                               \
    {                                                                   \
      int i;                                                            \
      Deref(A(0),word,tag,adr)                                          \
      i = UnTag_INT(word);                                              \
      get_integer(orc[i],1)                                             \
    }

#define o_kinit                                                         \
    {                                                                   \
      defer = 0;                                                        \
      skip = 0;                                                         \
      b_depth = 0;                                                      \
    }

#define o_ksend_oracle                                                  \
    {                                                                   \
      send_oracle();                                                    \
    }

/* Above this line, put your first macros (these included by pragma_c) */

#undef  fail
#define fail Fail_Like_Bool

/* Below this line, put your others macros and your functions */


static void Initialize_Usr(void)
{
  o_kinit
}

static void send_oracle(void)
{
  int i, orc_limit;
  printf("\ndelphi kappa oracle %d %d %d %d [", orc_n, orc_g, orc_l, orc_s);
  orc_limit = b_depth;
  if (port_orc) orc_limit = orc_l;
  for (i=1; i<orc_limit; i++) printf("%d,",orc[i]);
  printf("%d]\n",orc[orc_limit]);
}
/* end of user file */

#undef  fail
#define fail Fail_Like_Wam
